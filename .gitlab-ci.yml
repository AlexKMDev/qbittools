image: docker:20
variables:
  REGISTRY_IMAGE_NAME: "registry.gitlab.com/alexkm/qbittools"
  CACHE_IMAGE_NAME: "registry.gitlab.com/alexkm/qbittools:cache"
  BUILDKIT_INLINE_CACHE: "1"
cache:
  paths:
    - cache
services:
  - docker:20-dind

stages:
  - build
  - push

before_script:
   - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
   - docker context create builder-context
   - docker buildx create --name builderx --driver docker-container --use builder-context
   - apk add --no-cache python3 py3-pip
   - pip3 --version && python3 --version
   - pip3 install gitlab-release
   - mkdir -p ./cache

build_binary_amd64:
  stage: build
  script:
    - docker buildx build --platform=linux/amd64 -f Dockerfile.pyoxidizer --build-arg TARGET=x86_64-unknown-linux-musl --build-arg VERSION=$CI_COMMIT_TAG --build-arg CACHE_DIR=linux_amd64 -o out/linux_amd64 .
    - rm -rf ./cache/linux_amd64
    - mv out/linux_amd64/cache ./cache/linux_amd64
    - mv out/linux_amd64/qbittools qbittools_linux_x86_64
    - gitlab-release qbittools_linux_x86_64
  artifacts:
    paths:
      - qbittools_linux_x86_64
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'

build_docker_amd64:
  stage: build
  script:
    - docker buildx build --cache-from "$CACHE_IMAGE_NAME" -t "$CACHE_IMAGE_NAME" --push --platform=linux/amd64 .
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'

build_docker_arm64:
  stage: build
  script:
    - docker buildx build --cache-from "$CACHE_IMAGE_NAME" -t "$CACHE_IMAGE_NAME" --push --platform=linux/arm64 .
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'

# maybe when pyoxidizer will work with arm64 musl linux builds
# build_arm64:
#     stage: build
#     script:
#       - docker buildx build --cache-from "$CACHE_IMAGE_NAME" --tag "$CACHE_IMAGE_NAME"  --push --platform=linux/arm64/v8 .

push_docker:
  stage: push
  script: 
    - docker buildx build --cache-from "$CACHE_IMAGE_NAME" -t "$REGISTRY_IMAGE_NAME:$CI_COMMIT_TAG"  --push --platform=linux/amd64,linux/arm64 .
    - docker buildx build --cache-from "$CACHE_IMAGE_NAME" -t "$REGISTRY_IMAGE_NAME:latest"  --push --platform=linux/amd64,linux/arm64 .
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'